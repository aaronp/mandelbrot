................................................................................
....................................................    .........................
....................................................    .........................
............................................  ..            .....................
.............................................                   .................
...........................................                     .................
.........................................                        ................
..............................        ..                         ................
............................*          .                         ................
...........                                                   ...................
............................*          .                         ................
..............................        ..                         ................
.........................................                        ................
...........................................                     .................
.............................................                   .................
............................................  ..            .....................
....................................................    .........................
....................................................    .........................
.................................................................................
................................................................................



I've been wanting to do this for a while...

This is just a playful little console app which renders the Mandelbrot set. I knicked the computation pseudo-code
from http://en.wikipedia.org/wiki/Mandelbrot_set.

The implementation is in Scala, broken into 3 (main) components which are implemented as actors: 

The controller: holds current state (transation, zooming, etc)
The renderer: just spits results onto standard out
The computer: actor which does the computation for a given scale/view

It's built using sbt 0.11 and depends only on scalatest and junit.

As this was just for messing around, I initially tried to just freeform program w/ no tests (gasp!) just to
see what that felt like, but I did have to knock up a couple tests just to feel out a few areas. Anyway, that's
why you won't find many unit tests, though the code is factored in such a way so as to be easily testable, either from
automated tests or manually by dropping into the console (via sbt) and calling some of the functions directly.

Anyway, to run it, just open an sbt console, then 'run'. ;-)

=== Usage ===

The controller remembers the translation and zoom percentages, so each render takes into account the sum of the commands. For example, the first time the left arrow is pressed, the set is translated 1% on the x axis. 
The second time the left arrow is pressed, the set it translated 2% on the x axis. If then the plus (+) key is pressed,
the set is translated 2% on the x axis (as that is the current x-axis translation) and zoomed 1%.

To reset all commands back to zero, use the 'r' key.

the arrow keys (<-, ^, v, ->) to navigate
+/- to zoom
space to reset back to the initial structure
w to auto-render
s to stop auto-rendering
q to quit (or any unrecognised key)
